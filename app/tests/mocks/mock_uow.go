// Code generated by MockGen. DO NOT EDIT.
// Source: app/pkg/uow/uow.go
//
// Generated by this command:
//
//	mockgen -source=app/pkg/uow/uow.go -destination=app/tests/mocks/mock_uow.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uow "github.com/LeonardoMuller13/digital-bank-api/app/pkg/uow"
	gomock "go.uber.org/mock/gomock"
)

// MockUowInterface is a mock of Interface interface.
type MockUowInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUowInterfaceMockRecorder
}

// MockUowInterfaceMockRecorder is the mock recorder for MockUowInterface.
type MockUowInterfaceMockRecorder struct {
	mock *MockUowInterface
}

// NewMockUowInterface creates a new mock instance.
func NewMockUowInterface(ctrl *gomock.Controller) *MockUowInterface {
	mock := &MockUowInterface{ctrl: ctrl}
	mock.recorder = &MockUowInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUowInterface) EXPECT() *MockUowInterfaceMockRecorder {
	return m.recorder
}

// CommitOrRollback mocks base method.
func (m *MockUowInterface) CommitOrRollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitOrRollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitOrRollback indicates an expected call of CommitOrRollback.
func (mr *MockUowInterfaceMockRecorder) CommitOrRollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOrRollback", reflect.TypeOf((*MockUowInterface)(nil).CommitOrRollback), ctx)
}

// Do mocks base method.
func (m *MockUowInterface) Do(ctx context.Context, fn func(*uow.Uow) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUowInterfaceMockRecorder) Do(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUowInterface)(nil).Do), ctx, fn)
}

// GetRepository mocks base method.
func (m *MockUowInterface) GetRepository(ctx context.Context, name string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, name)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockUowInterfaceMockRecorder) GetRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockUowInterface)(nil).GetRepository), ctx, name)
}

// Register mocks base method.
func (m *MockUowInterface) Register(name string, fc uow.RepositoryFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", name, fc)
}

// Register indicates an expected call of Register.
func (mr *MockUowInterfaceMockRecorder) Register(name, fc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUowInterface)(nil).Register), name, fc)
}

// Rollback mocks base method.
func (m *MockUowInterface) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockUowInterfaceMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockUowInterface)(nil).Rollback), ctx)
}

// Unregister mocks base method.
func (m *MockUowInterface) Unregister(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", name)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockUowInterfaceMockRecorder) Unregister(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockUowInterface)(nil).Unregister), name)
}
