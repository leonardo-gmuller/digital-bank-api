// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/gateway/postgres/repositories/account.go
//
// Generated by this command:
//
//	mockgen -source=./app/gateway/postgres/repositories/account.go -destination=./app/tests/mocks/account_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/leonardo-gmuller/digital-bank-api/app/domain/dto"
	entity "github.com/leonardo-gmuller/digital-bank-api/app/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepositoryInterface is a mock of AccountRepositoryInterface interface.
type MockAccountRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryInterfaceMockRecorder
}

// MockAccountRepositoryInterfaceMockRecorder is the mock recorder for MockAccountRepositoryInterface.
type MockAccountRepositoryInterfaceMockRecorder struct {
	mock *MockAccountRepositoryInterface
}

// NewMockAccountRepositoryInterface creates a new mock instance.
func NewMockAccountRepositoryInterface(ctrl *gomock.Controller) *MockAccountRepositoryInterface {
	mock := &MockAccountRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepositoryInterface) EXPECT() *MockAccountRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepositoryInterface) Create(ctx context.Context, name, cpf, secret string, balance int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, cpf, secret, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryInterfaceMockRecorder) Create(ctx, name, cpf, secret, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).Create), ctx, name, cpf, secret, balance)
}

// GetAccountBalanceByID mocks base method.
func (m *MockAccountRepositoryInterface) GetAccountBalanceByID(ctx context.Context, id int64) (dto.ResponseAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalanceByID", ctx, id)
	ret0, _ := ret[0].(dto.ResponseAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalanceByID indicates an expected call of GetAccountBalanceByID.
func (mr *MockAccountRepositoryInterfaceMockRecorder) GetAccountBalanceByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalanceByID", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).GetAccountBalanceByID), ctx, id)
}

// GetAccountByCpf mocks base method.
func (m *MockAccountRepositoryInterface) GetAccountByCpf(ctx context.Context, cpf string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByCpf", ctx, cpf)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByCpf indicates an expected call of GetAccountByCpf.
func (mr *MockAccountRepositoryInterfaceMockRecorder) GetAccountByCpf(ctx, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByCpf", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).GetAccountByCpf), ctx, cpf)
}

// GetAccountByID mocks base method.
func (m *MockAccountRepositoryInterface) GetAccountByID(ctx context.Context, id int64) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, id)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountRepositoryInterfaceMockRecorder) GetAccountByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).GetAccountByID), ctx, id)
}

// List mocks base method.
func (m *MockAccountRepositoryInterface) List(ctx context.Context) ([]dto.ResponseAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]dto.ResponseAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccountRepositoryInterfaceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).List), ctx)
}

// UpdateBalance mocks base method.
func (m *MockAccountRepositoryInterface) UpdateBalance(ctx context.Context, id, newBalance int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, id, newBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockAccountRepositoryInterfaceMockRecorder) UpdateBalance(ctx, id, newBalance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).UpdateBalance), ctx, id, newBalance)
}
