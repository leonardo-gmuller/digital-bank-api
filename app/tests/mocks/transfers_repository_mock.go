// Code generated by MockGen. DO NOT EDIT.
// Source: app/gateway/postgres/repositories/transfers.go
//
// Generated by this command:
//
//	mockgen -source=app/gateway/postgres/repositories/transfers.go -destination=app/tests/mocks/transfers_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/LeonardoMuller13/digital-bank-api/app/domain/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockTransfersRepositoryInterface is a mock of TransfersRepositoryInterface interface.
type MockTransfersRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransfersRepositoryInterfaceMockRecorder
}

// MockTransfersRepositoryInterfaceMockRecorder is the mock recorder for MockTransfersRepositoryInterface.
type MockTransfersRepositoryInterfaceMockRecorder struct {
	mock *MockTransfersRepositoryInterface
}

// NewMockTransfersRepositoryInterface creates a new mock instance.
func NewMockTransfersRepositoryInterface(ctrl *gomock.Controller) *MockTransfersRepositoryInterface {
	mock := &MockTransfersRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTransfersRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransfersRepositoryInterface) EXPECT() *MockTransfersRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransfersRepositoryInterface) Create(ctx context.Context, accountOriginID, accountDestinationID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, accountOriginID, accountDestinationID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransfersRepositoryInterfaceMockRecorder) Create(ctx, accountOriginID, accountDestinationID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransfersRepositoryInterface)(nil).Create), ctx, accountOriginID, accountDestinationID, amount)
}

// List mocks base method.
func (m *MockTransfersRepositoryInterface) List(ctx context.Context, id int) ([]dto.OutputTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, id)
	ret0, _ := ret[0].([]dto.OutputTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTransfersRepositoryInterfaceMockRecorder) List(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransfersRepositoryInterface)(nil).List), ctx, id)
}
