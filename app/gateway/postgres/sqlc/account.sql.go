// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO account (name, cpf, secret, balance) 
VALUES ($1, $2, $3, $4)
`

type CreateAccountParams struct {
	Name    string
	Cpf     string
	Secret  string
	Balance int32
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount,
		arg.Name,
		arg.Cpf,
		arg.Secret,
		arg.Balance,
	)
	return err
}

const getAccountBalanceById = `-- name: GetAccountBalanceById :one
SELECT name, balance 
FROM account
WHERE id = $1
AND deleted_at IS NULL
`

type GetAccountBalanceByIdRow struct {
	Name    string
	Balance int32
}

func (q *Queries) GetAccountBalanceById(ctx context.Context, id int64) (GetAccountBalanceByIdRow, error) {
	row := q.db.QueryRow(ctx, getAccountBalanceById, id)
	var i GetAccountBalanceByIdRow
	err := row.Scan(&i.Name, &i.Balance)
	return i, err
}

const getAccountByCpf = `-- name: GetAccountByCpf :one
SELECT id, name, cpf, secret, balance, created_at, update_at, deleted_at 
FROM account
WHERE cpf = $1
AND deleted_at IS NULL
`

func (q *Queries) GetAccountByCpf(ctx context.Context, cpf string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByCpf, cpf)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cpf,
		&i.Secret,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, name, cpf, secret, balance, created_at, update_at, deleted_at 
FROM account
WHERE id = $1
AND deleted_at IS NULL
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cpf,
		&i.Secret,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, cpf, secret, balance, created_at, update_at, deleted_at 
FROM account
WHERE deleted_at IS NULL
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cpf,
			&i.Secret,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdateAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE account SET balance = $1
WHERE id = $2
AND deleted_at IS NULL
`

type UpdateBalanceParams struct {
	Balance int32
	ID      int64
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.Exec(ctx, updateBalance, arg.Balance, arg.ID)
	return err
}
